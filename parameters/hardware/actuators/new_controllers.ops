import("rtt_ros")
ros.import("tue_control_rtt")

var double TS = 0.001

# ---------------------------------------------------------------------------
# Reference Generator

loadComponent("refgen","tue::control::rtt::ReferenceGeneratorComponent")
refgen.configuration_rospkg = "amigo_bringup"
refgen.configuration_path = "parameters/hardware/actuators/amigo.yaml"
refgen.sampling_time = TS
refgen.configure

setActivity("refgen", TS, HighestPriority, ORO_SCHED_RT)
loadService("refgen", "actionlib")

refgen.actionlib.connect("/amigo/body/joint_trajectory_action");

# ---------------------------------------------------------------------------
# Controllers

loadComponent("controllers","tue::control::rtt::ControllerManagerComponent")
controllers.configuration_rospkg = "amigo_bringup"
controllers.configuration_path = "parameters/hardware/actuators/amigo.yaml"
controllers.sampling_time = TS
controllers.configure

setActivity("controllers", TS, HighestPriority, ORO_SCHED_RT)

connect("controllers.reset_pos", "refgen.reset_pos", ConnPolicy())
connect("controllers.controller_status", "refgen.controller_status", ConnPolicy())
connect("refgen.ref_pos", "controllers.ref_pos", ConnPolicy())
connect("refgen.ref_vel", "controllers.ref_vel", ConnPolicy())
connect("refgen.ref_acc", "controllers.ref_acc", ConnPolicy())

# ---------------------------------------------------------------------------
# Connect hardware to controllers

# Torso
# connect("torso.positions", "controllers.torso_pos_in", ConnPolicy());
# connect("controllers.torso_out", "torso.efforts", ConnPolicy());

# LPERA
connect("lpera.positions", "controllers.lpera_pos_in", ConnPolicy());
connect("controllers.lpera_out", "lpera.efforts", ConnPolicy());

# ---------------------------------------------------------------------------

refgen.start
controllers.start